use handlers;
use state;
use transport;
use util;
use std.types.bool;

fun main() i32 {
    var state_storage: ServerState;
    val server_state: *ServerState = ?state_storage;
    state_init(server_state);

    for (server_state->running) {
        val body: []u8 = read_message();
        if (body.data == nil && body.length == 0) {
            if (server_state->running == false) {
                brk;
            }

            if (server_state->shutdown_requested == false) {
                server_state->running = false;
                server_state->exit_status = 1;
            }

            brk;
        }

        handle_message(server_state, body);
        slice_free(body);

        if (server_state->running == false) {
            brk;
        }
    }

    state_dnit(server_state);

    ret server_state->exit_status;
}
